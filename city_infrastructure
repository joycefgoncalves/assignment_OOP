#task 1

class Vehicle:
    def __init__(self, reg_num, type, owner):
        self.registration_number = reg_num
        self.type = type
        self.owner = owner

    def update_owner(self, new_owner):
        self.owner = new_owner


# Demonstration
if __name__ == "__main__":
    # Creating instances of Vehicle
    vehicle1 = Vehicle("ABC123", "Car", "John")
    vehicle2 = Vehicle("XYZ456", "Motorcycle", "Alice")

    # Displaying initial details
    print("Initial Details:")
    print("Vehicle 1: Reg. No:", vehicle1.registration_number, "| Type:", vehicle1.type, "| Owner:", vehicle1.owner)
    print("Vehicle 2: Reg. No:", vehicle2.registration_number, "| Type:", vehicle2.type, "| Owner:", vehicle2.owner)

    # Updating owner
    vehicle1.update_owner("Michael")
    vehicle2.update_owner("Eve")

    # Displaying updated details
    print("\nUpdated Details:")
    print("Vehicle 1: Reg. No:", vehicle1.registration_number, "| Type:", vehicle1.type, "| Owner:", vehicle1.owner)
    print("Vehicle 2: Reg. No:", vehicle2.registration_number, "| Type:", vehicle2.type, "| Owner:", vehicle2.owner)


#task 2

class Event:
    def __init__(self, name, date):
        self.name = name
        self.date = date
        self.participant_count = 0

    def add_participant(self):
        self.participant_count += 1

    def get_participant_count(self):
        return self.participant_count


# Demonstration
if __name__ == "__main__":
    # Creating an instance of Event
    event = Event("Birthday Party", "2024-06-15")

    # Adding participants
    event.add_participant()
    event.add_participant()
    event.add_participant()

    # Retrieving participant count
    count = event.get_participant_count()

    # Displaying participant count
    print("Participant Count:", count)
